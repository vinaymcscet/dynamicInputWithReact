[{"C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\index.js":"1","C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\App.js":"2","C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\components\\SimpleInput.js":"3","C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\hooks\\use-input.js":"4","C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\components\\BasicForm.js":"5","C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\components\\CustomSignupForm.js":"6","C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\utils\\FormConfig.js":"7","C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\hooks\\use-form.js":"8","C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\utils\\InputValidationRules.js":"9","C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\Input\\Input.js":"10"},{"size":142,"mtime":1639547615979,"results":"11","hashOfConfig":"12"},{"size":342,"mtime":1640338795517,"results":"13","hashOfConfig":"12"},{"size":4485,"mtime":1639646388437,"results":"14","hashOfConfig":"12"},{"size":730,"mtime":1639646055024,"results":"15","hashOfConfig":"12"},{"size":3238,"mtime":1639650491516,"results":"16","hashOfConfig":"12"},{"size":520,"mtime":1640338776017,"results":"17","hashOfConfig":"12"},{"size":1864,"mtime":1640343429631,"results":"18","hashOfConfig":"12"},{"size":2126,"mtime":1639735807601,"results":"19","hashOfConfig":"12"},{"size":1369,"mtime":1640343581861,"results":"20","hashOfConfig":"12"},{"size":886,"mtime":1639718871480,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"rb055y",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\index.js",[],["44","45"],"C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\App.js",["46","47"],"C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\components\\SimpleInput.js",["48"],"import { useEffect, useState } from 'react'\nimport useInput from '../hooks/use-input'\n\nconst SimpleInput = props => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '')\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.includes('@'))\n  // Another way of form Event hadling and validation - useRef();\n  // On submit form validation Ref is better to use\n  // const nameInputref = useRef();\n  // const [enteredName, setEnteredName] = useState('');\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [enteredNameIsValid, setEnterednameisValid] = useState(false);\n  // const [enterednameTouched, setEnterednameTouched] = useState(false);\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false)\n  const [formIsValid, setFormIsValid] = useState(false)\n\n  // useEffect(() => {\n  //   if (enteredNameIsValid) {\n  //     console.log('Name Input is valid!')\n  //   }\n  // }, [enteredNameIsValid])\n\n  // const enteredNameIsValid = enteredName.trim() !== ''\n  // const nameInputIsInValid = !enteredNameIsValid && enterednameTouched\n\n  // const enteredEmailIsValid = enteredEmail.includes('@')\n  // const emailInputIsInValid = !enteredEmailIsValid && enteredEmailTouched\n\n  useEffect(() => {\n    if (enteredName && enteredEmail) {\n      setFormIsValid(true);\n    } else {\n      setFormIsValid(false);\n    }\n  }, [enteredNameIsValid, enteredEmailIsValid])\n\n  // const nameInputChangeHandler = event => {\n  //   setEnteredName(event.target.value)\n  //   // if (event.target.value.trim() !== '') {\n  //   //   setEnterednameisValid(true)\n  //   // }\n  // }\n\n  // const nameInputBlurHandler = event => {\n  //   setEnterednameTouched(true)\n  //   // if (enteredName.trim() === '') {\n  //   //     setEnterednameisValid(true)\n  //   //   }\n  // }\n\n  // const emailInputChangeHandler = event => {\n  //   setEnteredEmail(event.target.value)\n  // }\n\n  // const emailInputBlurHandler = event => {\n  //   setEnteredEmailTouched(true)\n  // }\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n\n    // setEnterednameTouched(true)\n    // setEnteredEmailTouched(true)\n\n    // if (enteredName.trim() === '') {\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      // setEnterednameisValid(false)\n      return\n    }\n    // setEnterednameisValid(true)\n    console.log(enteredName, enteredEmail)\n\n    // const enteredValue = nameInputref.current.value\n    // console.log(enteredValue)\n    // nameInputref.current.value = ''; // => Not Ideal, don't manipulate the DOM\n    // setEnteredName('')\n    // setEnterednameTouched(false);\n    resetNameInput();\n    resetEmailInput();\n    // setEnteredEmail('')\n    // setEnteredEmailTouched(false)\n  }\n\n  // const nameInputClasses = nameInputIsInValid\n  const nameInputClasses = nameInputHasError\n    ? 'form-control invalid'\n    : 'form-control'\n  const emailInputClasses = emailInputHasError\n    ? 'form-control invalid'\n    : 'form-control'\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        {/* <input type='text' id='name' onChange={nameInputChangeHandler} /> */}\n        <input\n          type='text'\n          id='name'\n          // ref={nameInputref}\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className='error-text'>Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your Email</label>\n        {/* <input type='text' id='name' onChange={nameInputChangeHandler} /> */}\n        <input\n          type='email'\n          id='email'\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHasError && (\n          <p className='error-text'>Please enter a valid email.</p>\n        )}\n      </div>\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  )\n}\n\nexport default SimpleInput\n","C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\hooks\\use-input.js",[],"C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\components\\BasicForm.js",[],"C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\components\\CustomSignupForm.js",[],"C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\utils\\FormConfig.js",[],"C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\hooks\\use-form.js",[],"C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\utils\\InputValidationRules.js",[],"C:\\Users\\v-kumarvina\\OneDrive - Microsoft\\Desktop\\React Tutorial\\complex-form\\src\\Input\\Input.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":8,"nodeType":"55","messageId":"56","endLine":1,"endColumn":17},{"ruleId":"53","severity":1,"message":"57","line":3,"column":8,"nodeType":"55","messageId":"56","endLine":3,"endColumn":19},{"ruleId":"58","severity":1,"message":"59","line":50,"column":6,"nodeType":"60","endLine":50,"endColumn":47,"suggestions":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'BasicForm' is defined but never used.","Identifier","unusedVar","'SimpleInput' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'enteredEmail' and 'enteredName'. Either include them or remove the dependency array.","ArrayExpression",["64"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},"Update the dependencies array to be: [enteredNameIsValid, enteredEmailIsValid, enteredName, enteredEmail]",{"range":"67","text":"68"},[1733,1774],"[enteredNameIsValid, enteredEmailIsValid, enteredName, enteredEmail]"]